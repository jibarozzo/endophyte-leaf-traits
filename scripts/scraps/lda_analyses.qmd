# EXTRA Lines of inquiry not pursued in the paper but that may be of interest for further analyses. \# Dimensionality Reduction of leaf traits

## LDA: Linear Discriminant Analyses

"Before performing LDA, consider: Inspecting the univariate distributions of each variable and make sure that they are normally distribute. If not, you can transform them using log and root for exponential distributions and Box-Cox for skewed distributions. removing outliers from your data and standardize the variables to make their scale comparable." <http://www.sthda.com/english/articles/36-classification-methods-essentials/146-discriminant-analysis-essentials-in-r/>

### LDA training

```{r, Ant LDA training}
#Analysis based on C. Lumibao code
#Transform and standarize leaf trait data. They are in different scales and a not normally distributed. 

#Ant
####### Data prep #######
#Subsetting the columns from the data set in order to transform and scale leaf trait variables and diversity measures.

ant_labels <- masterant[,1:4]
ant_std<-masterant[,6:15]

#Scaling
antsc_trait <- scale(ant_std, center = TRUE, scale = TRUE)

#Creating a new data set that is ready from downstream LDA analysis.
ant_lda <- cbind(ant_labels, antsc_trait)


#### Training model ####
#### Splitting the data into training (80%) and test set (20%)

lda.training <- ant_lda |>
  slice_sample(prop = 0.8)

lda.test <- ant_lda |>
  slice_sample( prop = 0.2)

### Training ###
lda_train <- lda(Species ~ Anthocyanins * LMA  * Thickness * Toughness * E_load * Shannon * Total_leaf_area_cut,
            data = lda.training, method = "moment")

# Model accuracy
mean(predict(lda_train)$class == lda.test$Species)
#0.1428571

predictions <- lda_train |> 
  predict(lda.test) #I believe this is saying: predict `lda.test` with the values from `lda_train`.

# Plot training data 
lda.data <- cbind(lda.training, predict(lda_train)$x)

ldaplot <- ggplot(lda.data, aes(LD1, LD2)) 
  ldaplot + geom_point(data = lda.data, aes(color = Species, shape = E_load), size = rel(3), alpha = 0.7)

# Model accuracy
mean(predictions$class == lda.test$Species)
xtabs(~lda.training$Species + predict(lda_train)$class)

```

Conclusion: The ant LDA training model accurately (100%) discriminates the test data set. Modelling interactions achieves 100% accuracy. This validates our model which can be important. Now we proceed with all the data points.

```{r, Pathogen LDA training}
# Pathogen
# Data prep 
#Subsetting the columns from the data set in order to transform and scale leaf trait variables and diversity measures.

pg_labels <- masterpat[,1:6]
pg_std<-masterpat[,7:16]

#Scaling
pgsc_trait <- scale(pg_std, center = TRUE, scale = TRUE)

#Creating a new data set that is ready from downstream LDA analysis.
pg_lda <- cbind(pg_labels, pgsc_trait)


# Training model 
## Splitting the data into training (80%) and test set (20%)

pglda.training <- pg_lda |>
  slice_sample(prop = 0.75)

pglda.test <- pg_lda |>
  slice_sample( prop = 0.25)

## Training
pglda_train <- lda(Species ~ Anthocyanins + LMA  + Thickness + Toughness + E_load + Shannon + Pathogen_Damage_area,
            data = pglda.training, method="moment")

# Model accuracy
mean(predict(pglda_train)$class == pglda.test$Species)
#0.1354167

predictions2 <- pglda_train |> 
  predict(pglda.test) #I believe this is saying: predict `lda.test` with the values from `lda_train`.

# Plot training data 
pglda.data <- cbind(pglda.training, predict(pglda_train)$x)

pgldaplot <- ggplot(pglda.data, aes(LD1, LD2)) 
  pgldaplot + geom_jitter(data = pglda.data, aes(color = Species, shape = E_load), size = rel(3), alpha = 0.7)

# Model accuracy
mean(predictions2$class == pglda.test$Species)
#100% accurate

xtabs(~pglda.training$Species + predict(pglda_train)$class)
```

Conclusion: The pathogen training model accurately (100%) discriminates the test data set. The model does not include interaction to achieve 100% accuracy in linear discrimination. This validates our model which can be important. Now we proceed with all the data points.

### LDA: Full models with functional leaf traits and Shannon diversity

#### Ant

```{r, Ant LDA with all functional leaf traits}
# Ants

#LDA cannot have NA's if not it will result in Error in x - group.means[g, ] : non-conformable arrays.
#

#This model is asked to discriminate per Species.

ld2a <- lda(Species ~ Anthocyanins + LMA  + Thickness + Toughness + Shannon,
            data = ant_lda, method="moment")

#Model predictions into list
lda.values <- predict(ld2a)

#Model scores
ld2a$scores <- predict(ld2a)$x #coef(ld2a) and ld2a$scaling is the same.

#Extraction of model coefficients 
ld2b <- data.frame(varnames = rownames(coef(ld2a)), coef(ld2a))
ld2b$length <- with(ld2b, sqrt(LD1^2+LD2^2))
# scaling <- data.frame(ld2a$scaling) #Another way of extracting model coefficients.
# scaling <- scaling |>
#   rownames_to_column(var = "varnames") |>
#   mutate(length = sqrt(LD1^2+LD2^2))


#only the x variables from predict
ldax <- as.data.frame(lda.values$x)
row.names(ldax)

#Write the predicted values for each samples as a table.
LDtraits <- cbind(ant_lda,ldax)
LDtraits # Use for ggplots


#labels<-data.frame(factor)
#labels

#Model accuracy
mean(LDtraits$Species == lda.values$class)

xtabs(~LDtraits$Species + lda.values$class)

#The model is 90% accurate is discriminating species groups.

#Discriminant axes percent variance explained
prop.lda = ld2a$svd^2/sum(ld2a$svd^2)

#LDA full model plot with ggplot

ldafull <- ggplot(LDtraits, aes(LD1, LD2)) +
  geom_point(data = LDtraits, aes(color = Species, shape = E_load), size = rel(3), alpha = 0.7) +
  stat_ellipse(aes(color = Species), geom = "path", size = 1.3, position = "identity", type = "t", linetype = 1,
               level = 0.95, segments = 51, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) +
    geom_hline(aes(yintercept=0), size=.2) + geom_vline(aes(xintercept=0), size=.2) +
    geom_segment(data = ld2b,
                      aes(x=0, y=0,
                          xend = LD1, yend = LD2,
                          shape = NULL, linetype = NULL,
                          alpha = length),
                      arrow = arrow(length=unit(0.2,"cm")),
                      color ="red") +
    geom_text(data = ld2b,
                   aes(x=LD1*0.75, y=LD2*0.75,
                       label = varnames, 
                       shape = NULL, linetype = NULL,
                       alpha = length),
                   size = 3, vjust = 0.5,
                   hjust = 0, color = "black") +
    labs(x = paste("LD1 (", round(prop.lda[1]*100, digits = 1), "%)", sep="")) +
    labs(title = "Ants LDA: all E-+, leaf traits and Shannon diversity", caption = "(90% accuracy)", y = paste("LD2 (", round(prop.lda[2]*100, digits = 1), "%)", sep="")) +  
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
   theme(
plot.title = element_text(color="red", size=14, face="bold"))

ldafull 

#ggsave(filename = "plots/LDAfull_02282023.png", plot = ldafull, dpi=600, units=c("mm"), width=300, height=300)

```

The full model is 90% accurate is discriminating species groups. This is probably due to only modelling fixed effects. No interaction terms are modeled. Previous LDA model (with no Shannon diversity included) had an accuracy of 88% and LD1 and LD2 differed by \~0.5%. Code was updated in February 28, 2023 to include Shannon diversity.

#### Pathogen

```{r, Pathogen LDA with all functional leaf traits}
#Pathogen
# Data prep 
#Subsetting the columns from the data set in order to transform and scale leaf trait variables and diversity measures.

pg_labels <- masterpat[,1:6]
pg_std<-masterpat[,7:16]

#Scaling
pgsc_trait <- scale(pg_std, center = TRUE, scale = TRUE)

#Creating a new data set that is ready from downstream LDA analysis.
pg_lda <- cbind(pg_labels, pgsc_trait)


## LDA
pglda <- lda(Species ~ Anthocyanins + LMA  + Thickness + Toughness + Shannon,
            data = pg_lda, method = "moment")


#Model predictions into list
pglda.values <- predict(pglda)

#Model scores
pglda$scores <- predict(pglda)$x

#coef(ld2a) and ld2a$scaling is the same.

#Extraction of model coefficients 
pgld2b <- data.frame(varnames = rownames(coef(pglda)), coef(pglda))
pgld2b$length <- with(pgld2b, sqrt(LD1^2+LD2^2))
# scaling <- data.frame(ld2a$scaling) #Another way of extracting model coefficients.
# scaling <- scaling |>
#   rownames_to_column(var = "varnames") |>
#   mutate(length = sqrt(LD1^2+LD2^2))


#only the x variables from predict
pgldax <- as.data.frame(pglda.values$x)
row.names(pgldax)

#Write the predicted values for each samples as a table.
LDPGtraits <- cbind(pg_lda,pgldax)
LDPGtraits # Use for ggplots


#labels<-data.frame(factor)
#labels

#Model accuracy
mean(LDPGtraits$Species == pglda.values$class)

xtabs(~LDPGtraits$Species + pglda.values$class)

#The model is 95.3% accurate is discriminating species groups.

#Discriminant axes percent variance explained
prop.pg = pglda$svd^2/sum(pglda$svd^2)

pgldaplot <- ggplot(LDPGtraits, aes(LD1, LD2)) +
  geom_point(data = LDPGtraits, aes(color = Species, shape = E_load), size = rel(3), alpha = 0.7) +
  stat_ellipse(aes(color = Species), geom = "path", size = 1.3, position = "identity", type = "t", linetype = 1,
               level = 0.95, segments = 51, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) +
    geom_hline(aes(yintercept=0), size=.2) + geom_vline(aes(xintercept=0), size=.2) +
    geom_segment(data = pgld2b,
                      aes(x=0, y=0,
                          xend = LD1, yend = LD2,
                          shape = NULL, linetype = NULL,
                          alpha = length),
                      arrow = arrow(length=unit(0.2,"cm")),
                      color ="red") +
    geom_text(data = pgld2b,
                   aes(x=LD1*0.75, y=LD2*0.75,
                       label = varnames, 
                       shape = NULL, linetype = NULL,
                       alpha = length),
                   size = 3, vjust = 0.5,
                   hjust = 0, color = "black") +
    labs(x = paste("LD1 (", round(prop.lda[1]*100, digits = 1), "%)", sep="")) +
    labs(title = "Pathogen LDA: E-+, leaf traits and Shanno diversity", caption = "(95% accuracy)", y = paste("LD2 (", round(prop.lda[2]*100, digits = 1), "%)", sep="")) +  
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
   theme(
plot.title = element_text(color="red", size=14, face="bold"))

pgldaplot

#ggsave(filename = "plots/Path_LDAfull_02282023.png", plot = pgldaplot, dpi=600, units=c("mm"), width=300, height=300)

```

```{r, LDA model with interactions}
# LDA with interactions #############

ld2c <- lda(Species ~ Anthocyanins * LMA  * Thickness * Toughness * E_load * Shannon * Total_leaf_area_cut,
            data = ant_lda, method="moment")

#Model predictions into list
ldac.values <- predict(ld2c)

#Model scores
ld2c$scores <- predict(ld2c)$x

#coef(ld2a) and ld2a$scaling is the same.

#Extraction of model coefficients 
ld2d <- data.frame(varnames = rownames(coef(ld2c)), coef(ld2c))

ld2d$length <- with(ld2d, sqrt(LD1^2+LD2^2))

#only the x variables from predict
ldacx <- as.data.frame(ldac.values$x)
row.names(ldacx)

#Write the predicted values for each samples as a table.
LDCtraits <- cbind(ant_lda,ldacx)
LDCtraits # Use for ggplots

row.names(ld2c$scaling)
#labels<-data.frame(factor)
#labels

#Model accuracy
mean(LDCtraits$Species == ldac.values$class)

xtabs(~LDCtraits$Species + ldac.values$class)

#The model is 100% accurate is discriminating species groups.

#Discriminant axes percent variance explained
prop.ldac = ld2c$svd^2/sum(ld2c$svd^2)

#LDA full model plot with ggplot

ldainter <- ggplot(LDCtraits, aes(LD1, LD2)) +
  geom_point(data = LDCtraits, aes(color = Species, shape = E_load), size = rel(3), alpha = 0.7) +
  stat_ellipse(aes(color = Species), geom = "path", size = 1.3, position = "identity", type = "t", linetype = 1,
               level = 0.95, segments = 51, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) +
    geom_hline(aes(yintercept=0), size=.2) + geom_vline(aes(xintercept=0), size=.2) +
    geom_segment(data = ld2d,
                      aes(x=0, y=0,
                          xend = LD1, yend = LD2,
                          shape = NULL, linetype = NULL,
                          alpha = length),
                      arrow = arrow(length=unit(0.2,"cm")),
                      color ="red") +
    geom_text(data = ld2b,
                   aes(x=LD1*0.75, y=LD2*0.75,
                       label = varnames, 
                       shape = NULL, linetype = NULL,
                       alpha = length),
                   size = 3, vjust = 0.5,
                   hjust = 0, color = "black") +
    labs(x = paste("LD1 (", round(prop.ldac[1]*100, digits = 1), "%)", sep="")) +
    labs(title = "Full model LDA with interactions", caption = "100% accuracy", y = paste("LD2 (", round(prop.ldac[2]*100, digits = 1), "%)", sep="")) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
  theme(
plot.title = element_text(color="red", size=14, face="bold.italic"))

ldainter

#ggsave(filename = "LDAinter.png", plot = ldainter, dpi=600, units=c("mm"), width=300, height=300)
```

Modelling the interaction does achieve 100% accuracy but it is harder to interpret. The plot for model with interaction terms is harder to interpret. The arrow labels over lap and are not readable.

### LDA: E+ models

The objective here is to model what leaf traits are important for discriminating between groups with differing endophyte loads. Focusing on the endophyte load allows us to understand if E+ and E- are distinguishable.

```{r, Ant E_load models}
### Data prep ###
### subset for E+ samples
ant_Elab <- masterant |>
  filter(E_load == "E+")

e_labs <- ant_Elab[,1:4]
e_std <- ant_Elab[,6:15]

#Scaling
esc_trait <- scale(e_std, center = TRUE, scale = TRUE)

#Creating a new data set that is ready from downstream LDA analysis.
e_lda <- cbind(e_labs, esc_trait)

lde <- lda(Species ~ Anthocyanins + LMA  + Thickness + Toughness + Shannon,
            data = e_lda, method = "moment")

#Model predictions into list
lde.values <- predict(lde)

#Model scores
lde$scores <- predict(lde)$x

#coef(ld2a) and ld2a$scaling is the same.

#Extraction of model coefficients 
ld2e <- data.frame(varnames = rownames(coef(lde)), coef(lde))

ld2e$length <- with(ld2e, sqrt(LD1^2+LD2^2))

#only the x variables from predict
ldex <- as.data.frame(lde.values$x)
row.names(ldex)

#Write the predicted values for each samples as a table.
LDEtraits <- cbind(e_lda,ldex)
LDEtraits # Use for ggplots and linear mixed models

row.names(ld2e$scaling)
#labels<-data.frame(factor)
#labels

#Model accuracy
mean(LDEtraits$Species == lde.values$class)

xtabs(~LDEtraits$Species + lde.values$class)

#The model is 97% accurate is discriminating species groups.

#Discriminant axes percent variance explained
prop.lde = lde$svd^2/sum(lde$svd^2)

#LDA E+ full model plot with ggplot
ldee <- ggplot(LDEtraits, aes(LD1, LD2)) +
  geom_point(data = LDEtraits, aes(color = Species), size = rel(3), alpha = 0.7) +
  stat_ellipse(aes(color = Species), geom = "path", size = 1.3, position = "identity", type = "t", linetype = 1,
               level = 0.95, segments = 51, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) +
    geom_hline(aes(yintercept=0), size=.2) + geom_vline(aes(xintercept=0), size=.2) +
    geom_segment(data = ld2e,
                      aes(x=0, y=0,
                          xend = LD1, yend = LD2,
                          shape = NULL, linetype = NULL,
                          alpha = length),
                      arrow = arrow(length=unit(0.2,"cm")),
                      color ="red") +
    geom_text(data = ld2e,
                   aes(x=LD1*0.75, y=LD2*0.75,
                       label = varnames, 
                       shape = NULL, linetype = NULL,
                       alpha = length),
                   size = 3, vjust = 0.5,
                   hjust = 0, color = "black") +
    labs(x = paste("LD1 (", round(prop.lde[1]*100, digits = 1), "%)", sep="")) +
    labs(title = "Ant E+ LDA: leaf traits and Shannon diversity", caption = "(97% accuracy)", y = paste("LD2 (", round(prop.lde[2]*100, digits = 1), "%)", sep="")) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
   theme(
plot.title = element_text(color="red", size=14, face="bold"))

ldee


#ggsave(filename = "plots/Ant_LDA_Eplus02282023.png", plot = ldee, dpi=600, units=c("mm"), width=300, height=300)
```

The November 2022 iteration of this plot had similar values for LD1 and LD2. What is different now (02282023) is how the traits are "driving" the discrimination of the groups. Leaf toughness, thickness and LMA are in the upper half of the plot, opposite to anthocyanins in LD2. Additionally, leaf toughness and thickness align opposite to each other in LD1. Shannon diversity does not seam to be important for distinguishing the groups.

```{r, Pathogen E_load models}
### Data prep ###
### subset for E+ samples
pat_Elab <- masterpat |>
  filter(E_load == "E+")

pe_labs <- pat_Elab[,1:6]
pe_std <- pat_Elab[,7:16]

#Scaling
psc_trait <- scale(pe_std, center = TRUE, scale = TRUE)

#Creating a new data set that is ready from downstream LDA analysis.
pe_lda <- cbind(pe_labs, psc_trait)

ldep <- lda(Species ~ Anthocyanins + LMA  + Thickness + Toughness + Shannon,
            data = pe_lda, method="moment")

#Model predictions into list
ldep.values <- predict(ldep)

#Model scores
ldep$scores <- predict(ldep)$x

#coef(ld2a) and ld2a$scaling is the same.

#Extraction of model coefficients 
ld2ep <- data.frame(varnames = rownames(coef(ldep)), coef(ldep))
ld2ep$length <- with(ld2ep, sqrt(LD1^2+LD2^2))

#only the x variables from predict
ldepx <- as.data.frame(ldep.values$x)
row.names(ldepx)

#Write the predicted values for each samples as a table.
LDEPtraits <- cbind(pe_lda,ldepx)
LDEPtraits # Use for ggplots and linear mixed models

#labels<-data.frame(factor)
#labels

#Model accuracy
mean(LDEPtraits$Species == ldep.values$class)

xtabs(~LDEPtraits$Species + ldep.values$class)

#The model is 100% accurate is discriminating species groups.

#Discriminant axes percent variance explained
prop.ldep = ldep$svd^2/sum(ldep$svd^2)

#LDA E+ full model plot with ggplot
ldeep <- ggplot(LDEPtraits, aes(LD1, LD2)) +
  geom_point(data = LDEPtraits, aes(color = Species), size = rel(3), alpha = 0.7) +
  stat_ellipse(aes(color = Species), geom = "path", size = 1.3, position = "identity", type = "t", linetype = 1,
               level = 0.95, segments = 51, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) +
    geom_hline(aes(yintercept=0), size=.2) + geom_vline(aes(xintercept=0), size=.2) +
    geom_segment(data = ld2ep,
                      aes(x=0, y=0,
                          xend = LD1, yend = LD2,
                          shape = NULL, linetype = NULL,
                          alpha = length),
                      arrow = arrow(length=unit(0.2,"cm")),
                      color ="red") +
    geom_text(data = ld2ep,
                   aes(x=LD1*0.75, y=LD2*0.75,
                       label = varnames, 
                       shape = NULL, linetype = NULL,
                       alpha = length),
                   size = 3, vjust = 0.5,
                   hjust = 0, color = "black") +
    labs(x = paste("LD1 (", round(prop.ldep[1]*100, digits = 1), "%)", sep="")) +
    labs(title = "Pathogen E+ LDA: leaf traits and Shannon diversity", caption = "(100% accuracy)", y = paste("LD2 (", round(prop.ldep[2]*100, digits = 1), "%)", sep="")) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
   theme(
plot.title = element_text(color="red", size=14, face="bold"))

ldeep  

# ggsave(filename = "plots/Path_LDA_Eplus_02282023.png", plot = ldeep, dpi=600, units=c("mm"), width=300, height=300)

```

Again, very similar to previous results. Looking closely at the plots from 11/2022 I see that some of the were calculated with Shannon diversity. This explain why the results are so similar or the same. BAR-02282023

# LDA: simple linear regression models

We have reduced the number of leaf traits by computing an LDA for ant and pathogen trials. This reduced the number of covariates to two synthetic ones that explain the most variance in the model: LD1 and LD2. Now, we proceed to compute simple linear regressions with LD1 and LD2 as the fixed effects for the models, while adding biological trait measurements (i.e. Shannon diversity).

The LD's from data frames `LDtraits` and `LDPGtraits` are computed with all the data points (i.e. E+ and E- samples) for each trial type. The LD's from data frames `LDEtraits` and `LDEPtraits` are computed with the E+ samples.

### Ant

```{r, Ant LDA regression, tidy = FALSE}
# Use LDA loadings to model effects ant herbivory

# Null model
lm1 <- lm(Total_leaf_area_cut ~ 1, data = LDEtraits)
summary(lm1)
#plot(lm1)

plot_model(lm1, type = "diag")

# Model 1 
lm2 <- lm(Total_leaf_area_cut ~ LD1 + LD2, data = LDEtraits)
summary(lm2)
# Residuals
# lm2_resid <- resid(lm2, type = "response")
# lm2_fitted <- fitted(lm2)
#Histograms
# hist(lm2_resid)
# hist(lm2_fitted)

#lm2 model plot
plot_model(lm2, type = "diag")
AIC(lm2) #106.7782 This is slightly higher than lm1.

# Model comparison
anova(lm1, lm2)

#step(lm2, direction = "both") #Warning: attempting model selection on an essentially perfect fit is nonsense
############
ant_ld1reg <- ggplot(LDEtraits, aes(LD1, Total_leaf_area_cut)) +
  geom_jitter(aes(color = Species), size = 3, alpha = 0.7) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black", size = 0.5) +
  stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  #stat_regline_equation(label.y.npc = "top", label.x.npc = "center", aes(label = ..eq.label..), color= "black", size = 2.2) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
  labs(title = "Herbivory by leaf cutter ants vs. LD1", y = "Total leaf area cut", caption = "LD1 explains the most variance in LDA model.") +
  theme(plot.title = element_text(color="red", size = 14, face="bold.italic"))
  
ant_ld1reg

#ggsave(filename = "Ant_LD1_Reg.png", plot = ant_ld1reg, dpi=600, units=c("mm"), width=300, height=300)
#
#LD2
ant_ldareg <- ggplot(LDEtraits, aes(LD2, Total_leaf_area_cut)) +
  geom_jitter(aes(color = Species), size = 3, alpha = 0.7) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black", size = 0.5) +
  stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  #stat_regline_equation(label.y.npc = "top", label.x.npc = "center", aes(label = ..eq.label..), color= "black", size = 2.2) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
  labs(title = "Herbivory by leaf cutter ants vs. LD2", y = "Total leaf area cut", caption = "LD2 is the most significant predictor in LMM.") +
  theme(plot.title = element_text(color="red", size = 14, face="bold.italic"))
  
ant_ldareg

#ggsave(filename = "Ant_LD2_Reg.png", plot = ant_ldareg, dpi=600, units=c("mm"), width=300, height=300)
#
#Shannon Diversity

ant_ldashannon <- ggplot(LDEtraits, aes(Shannon, Total_leaf_area_cut)) +
  geom_jitter(aes(color = Species), size = 3, alpha = 0.7) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black", size = 0.5) +
  stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  #stat_regline_equation(label.y.npc = "top", label.x.npc = "center", aes(label = ..eq.label..), color= "black", size = 2.2) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
  labs(title = "Herbivory by leaf cutter ants vs. Shannon diversity", y = "Total leaf area cut") +
  theme(plot.title = element_text(color="red", size = 14, face="bold.italic"))

ant_ldashannon

#ggsave(filename = "Ant_LDA_shannon.png", plot = ant_ldashannon, dpi=600, units=c("mm"), width=300, height=300)

```

### Pathogen

```{r}
# Use LDA loadings to model effects ant herbivory

# Null model
pm1 <- lm(Pathogen_Damage_area~ 1, data = LDEPtraits)
summary(pm1)
#plot(pm1)
plot_model(pm1, type = "diag")

# Model 1 
pm2 <- lm(Pathogen_Damage_area ~ LD1 + LD2 + Shannon, data = LDEPtraits)
summary(pm2)
# Residuals
# lm2_resid <- resid(lm2, type = "response")
# lm2_fitted <- fitted(lm2)
#Histograms
# hist(lm2_resid)
# hist(lm2_fitted)

#lm2 model plot
plot_model(pm2, type = "diag")
AIC(pm2)

# Model comparison
anova(pm1, pm2)

#step(pm2, direction = "both") #Warning: attempting model selection on an essentially perfect fit is nonsense
############
#LD1
pat_ld1reg <- ggplot(LDEPtraits, aes(LD1, Pathogen_Damage_area)) +
  geom_jitter(aes(color = Species), size = 3, alpha = 0.7) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black", size = 0.5) +
  stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  #stat_regline_equation(label.y.npc = "top", label.x.npc = "center", aes(label = ..eq.label..), color= "black", size = 2.2) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
  labs(title = "Pathogen Leaf Damage vs. LD1", y = "Total pathogen damaged area", caption = "LD1 explains the most variance in the LDA model") +
  theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
  
pat_ld1reg

#ggsave(filename = "Pat_LD1_Reg.png", plot = pat_ld1reg, dpi=600, units=c("mm"), width=300, height=300)
#
#LD2
pat_ld2reg <- ggplot(LDEPtraits, aes(LD2, Pathogen_Damage_area)) +
  geom_jitter(aes(color = Species), size = 3, alpha = 0.7) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black", size = 0.5) +
  stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  #stat_regline_equation(label.y.npc = "top", label.x.npc = "center", aes(label = ..eq.label..), color= "black", size = 2.2) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
  labs(title = "Pathogen Leaf Damage vs. LD2", y = "Total pathogen damaged area") +
  theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
  
pat_ld2reg

#ggsave(filename = "Pat_LD2_Reg.png", plot = pat_ld2reg, dpi=600, units=c("mm"), width=300, height=300)
#
#Shannon diversity

pat_lda_shannon <- ggplot(LDEPtraits, aes(Shannon, Pathogen_Damage_area)) +
  geom_jitter(aes(color = Species), size = 3, alpha = 0.7) +
  geom_smooth(method = lm, se = T , level = 0.95, na.rm = F, color = "black", size = 0.5) +
  stat_regline_equation(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = "~~~~"))) +
  #stat_regline_equation(label.y.npc = "top", label.x.npc = "center", aes(label = ..eq.label..), color= "black", size = 2.2) +
  scale_color_manual(values = met.brewer(name = "Cross", n = 8, type="discrete")) +
  labs(title = "Pathogen Leaf Damage vs. Shannon diversity", y = "Total pathogen damaged area") +
  theme(plot.title = element_text(color="red", size=14, face="bold.italic"))
  
pat_lda_shannon

#ggsave(filename = "Pat_LDA_shannon.png", plot = pat_lda_shannon, dpi=600, units=c("mm"), width=300, height=300)
```

# LDA: Linear Mixed Models

In the section above, we see that the diagnostics plots for simple linear regressions with the ant and pathogen data have a fair amount of heteroskedasticity. Meaning, there is an un-even or non-random distribution of the residuals. They resemble more a triangle or fan-like distribution. In this section, I attempt to optimize by changing the estimation methos and applying optimizers to the distribution of the residuals with generalized linear mixed models (e.g. `bobyqa`)or linear mixed effects models (e.g. `nlminb`) .

Initial models with `nlme` package use "Maximum Likelihood", then "REML" and `Species` or `E_load` as random effects.

## Ants

### ML-ants

```{r, Ant Maximum Likelihood model selection}
#nlme package
#Model1
aglm <- lme(Total_leaf_area_cut ~ LD1 + LD2, random = ~1|Species, method = "ML", data = LDEtraits)

summary(aglm)
AIC(aglm) # 108.5
plot_model(aglm, type = "diag")

#Model2
aglm2 <- lme(Total_leaf_area_cut ~ LD1 + LD2, random = ~1|Species/E_load, method = "ML", data = LDEtraits)

summary(aglm2)
AIC(aglm2) #110.5
plot_model(aglm2, type = "diag")

#Model3 interactions
aglm3 <- lme(Total_leaf_area_cut ~ LD1 * LD2, random = ~1|Species/E_load, method = "ML", data = LDEtraits)

summary(aglm3)
AIC(aglm3) #111.5
plot_model(aglm3, type = "diag")


tab_model(aglm, aglm2, aglm3, show.re.var = T, show.aic = TRUE, show.intercept = TRUE, title = "LMM Maximum Likelihood Ant damage", CSS = list(
    css.depvarhead = 'font-weight:bold;',
    css.centeralign = 'text-align: left;', 
    css.firsttablecol = 'font-weight: bold;',
    css.summary = 'color: blue; font-weight: bold;',
     dv.labels = c("aglm ", "aglm2", "aglm3"),
    p.style = "numeric_stars"))
```

```{r, Ant Model validation}
aglm_resid <- resid(aglm, type = "response")
aglm_fitted <- fitted(aglm)

plot(aglm_resid)
plot(aglm_fitted)

# Visual Model Validation

op <- par(mfrow = c(2, 2), mar = c(4, 4, 2, 2))
plot(LDEtraits$LD1, jitter(resid(aglm, type = "response")), xlab = "LD1", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$LD2, jitter(resid(aglm, type = "response")), xlab = "LD2", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$Shannon, jitter(resid(aglm, type = "response")), xlab = "Shannon", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
```

### REML-ants

```{r, Ant Restricted Maximum Likelihood models}
#  < - glmer(Total_leaf_area_cut ~ LD1 + LD2 + Shannon + (1| Species) + (1| E_load), data = LDEtraits, family = "poisson", control = glmerControl(optimizer="bobyqa"))

areml <- lme(Total_leaf_area_cut ~ LD1 + LD2, random = ~1|Species, method = "REML", data = LDEtraits) 

summary(areml)
AIC(areml) #118.6
plot_model(areml, type = "diag")

tab_model(aglm, areml, show.re.var = T, show.aic = TRUE, show.intercept = TRUE, title = "LMM Maximum Likelihood Ant damage", CSS = list(
    css.depvarhead = 'font-weight:bold;',
    css.centeralign = 'text-align: left;', 
    css.firsttablecol = 'font-weight: bold;',
    css.summary = 'font-weight: bold;',
    dv.labels = c("aglm ", "areml"),
    p.style = "numeric_stars"))


```

Model estimation with REML increases AIC. Proceeding with ML model estimation.

### Random effects-ants

```{r, Checking contribution of random effects-ants}

agls <- gls(Total_leaf_area_cut ~ LD1 + LD2, method = "ML", data = LDEtraits)

AIC(aglm, agls)
anova(aglm, agls)
#  

```

Species as a random effect increases AIC value by two points. Not that much, and it is worth keeping because it's biological relevance to the questions.

### ML-2-ants

Continuation of previous ML section. Modelling variance structure with `varIdent`, `varExp` and `varComb`.

```{r, Ant Modelling Variance Structure}
#varIdent
aglm_ident <- lme(Total_leaf_area_cut ~ LD1 + LD2, random = ~1|Species, method = "ML", weights = varIdent(form = ~ 1|Species), control =  lmeControl(opt= 'nlminb'),  data = LDEtraits)

AIC(aglm_ident) #AIC  = 97
summary(aglm_ident)
Anova(aglm_ident, type = "III")

plot_model(aglm_ident, type= "diag")

#Modelling variance structure with varIdent returns a lower AIC value (97.08464)
#

# Model validation
op <- par(mfrow = c(3, 2), mar = c(4, 4, 2, 2))
plot(LDEtraits$LD1, jitter(resid(aglm_ident, type = "response")), xlab = "LD1", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$LD1, jitter(resid(aglm_ident, type = "normalized")), xlab = "LD1", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$LD2, jitter(resid(aglm_ident, type = "response")), xlab = "LD2", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$LD2, jitter(resid(aglm_ident, type = "normalized")), xlab = "LD2", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$Shannon, jitter(resid(aglm_ident, type = "response")), xlab = "Shannon", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$Shannon, jitter(resid(aglm_ident, type = "normalized")), xlab = "Shannon", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")

#
par(mfrow = c(1,2))
plot(fitted(aglm_ident), resid(aglm_ident, type="normalized"), cex.axis=.5,
cex=.4, xlab="fitted values", ylab="standardized resid", cex.lab=.8)
plot(LDEtraits$Species, resid(aglm_ident, type="normalized"), cex.axis=.5,
cex=.4, xlab="Species", ylab="standardized resid", cex.lab=.8)
abline(h = 0, col = "blue")
```

```{r, Ant varExp}
# varExp

# aglm_exp <- lme(Total_leaf_area_cut ~ LD1 + LD2, random = ~1|Species, method = "ML", weights = varExp(form = ~ LD1), control =  lmeControl(opt= 'nlminb'),  data = LDEtraits)
# 
#AIC(aglm_exp) #AIC = 107.98

```

```{r, Ant varComb}
# varComb

 aglm_comb <- lme(Total_leaf_area_cut ~ LD1 + LD2, random = ~1|Species, method = "ML", weights = varComb(varIdent(form = ~ 1|Species), varPower()), control = lmeControl(opt = 'nlminb'),  data = LDEtraits) # Model is not converging as of 02/28/2023
# The model above was not converging because I modeled with a fixed factor (Shannon) that was already reduced with the LDA. It makes it hard converge or there i no convergence at all because of the colinearity it causes (If I remember correctly). -BAR 03/02/2023
# 
# control = lmeControl(msMaxIter = 1000, msMaxEval = 1000)

AIC(aglm_comb) #Lowest AIC yet! 94.85672
summary(aglm_comb)
Anova(aglm_comb, type = "III")
# plot_model(aglm_comb, type = "diag")
#anova(M1,type="marginal") #What is a type III ANOVA?


#Model Validation
op <- par(mfrow = c(3, 2), mar = c(4, 4, 2, 2))
plot(LDEtraits$LD1, jitter(resid(aglm_comb, type = "response")), xlab = "LD1", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$LD1, jitter(resid(aglm_comb, type = "normalized")), xlab = "LD1", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$LD2, jitter(resid(aglm_comb, type = "response")), xlab = "LD2", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$LD2, jitter(resid(aglm_comb, type = "normalized")), xlab = "LD2", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$Shannon, jitter(resid(aglm_comb, type = "response")), xlab = "Shannon", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$Shannon, jitter(resid(aglm_comb, type = "normalized")), xlab = "Shannon", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")


#
par(mfrow = c(1,2))
plot(fitted(aglm_comb), resid(aglm_comb, type="normalized"), cex.axis=.5,
cex=.4, xlab="fitted values", ylab="standardized resid", cex.lab=.8)
abline(h = 0, col = "blue")

plot(LDEtraits$Species, resid(aglm_comb, type="normalized"), cex.axis=.5,
cex=.4, xlab="Species", ylab="standardized resid", cex.lab=.8)
abline(h = 0, col = "blue")

```

The model above was not converging because I modeled with a fixed factor (Shannon) that was already reduced with the LDA. It makes it hard converge or there i no convergence at all because of the colinearity it causes (If I remember correctly). -BAR 03/02/2023

```{r, Table comparing Ant linear models}
# Initial model with out variance structure, `varIdent` structure, and `varComb`

tab_model(aglm, aglm_ident, aglm_comb,
          transform = NULL,
          show.est = TRUE,
          show.se = TRUE,
          auto.label = TRUE,
          show.re.var = T, 
          show.aic = TRUE, 
          show.intercept = TRUE, 
          title = "LMM Maximum Likelihood Ant damage",
          # pred.labels = c("Intercept"),
          dv.labels = c("aglm ", "aglm_ident", "aglm_comb"),
          string.pred = "Coefficient",
          string.ci = "CI (95%)",
          string.p = "P-Value",
          digits.p = 3, 
          p.style = c("numeric_stars"))


    # css.depvarhead = 'font-weight:bold;',
    # css.centeralign = 'text-align: left;', 
    # css.firsttablecol = 'font-weight: bold;',
    # css.summary = 'color: black;',
    # p.style = "numeric_stars"))
```

#### Notes on model building with LDA axes

Optimizers: `lmeControl` uses `nlminb` as the default optimizer. Unconstrained and box-constrained optimization using PORT routines. `varIdent` is used to model variance structure because I believe variance varies across tree species (categories).

Variance structure: I explored further, variance modelling with `varComb`. This resulted in the lowest AIC value of all the models. Potentially I can model these interactions with `glmer`. Now, I have to decide if I want to use "generalized" linear mixed effects models or "linear" mixed effects models. I am uncertain of how GLMM's handle variance structure more than just including the random effects.

I tried nesting E_load in Species as a random effect but it increases AIC value (\~100). It is not a big change. Potentially worth including.

Repeat process with pathogen data set.

## Pathogen

### ML-pathogen

```{r, Pathogen Maximum Likelihood model selection}
#nlme package

#Model1
pglm <- lme(Pathogen_Damage_area ~ LD1 + LD2, random = ~1|Species, method = "ML", data = LDEPtraits)
summary(pglm)
anova(pglm)

AIC(pglm) # 182.26
plot_model(pglm, type = "diag")


# Visual Model Validation

pglm_resid <- resid(pglm, type = "response")
pglm_fitted <- fitted(pglm)

plot(pglm_resid)
plot(pglm_fitted)

op <- par(mfrow = c(2, 2), mar = c(4, 4, 2, 2))
plot(LDEPtraits$LD1, jitter(resid(pglm, type = "response")), xlab = "LD1", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$LD2, jitter(resid(pglm, type = "response")), xlab = "LD2", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$Shannon, jitter(resid(pglm, type = "response")), xlab = "Shannon", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")


#Model2
pglm2 <- lme(Pathogen_Damage_area  ~ LD1 + LD2, random = ~1|Species/E_load, method = "ML", data = LDEPtraits)

summary(pglm2)
AIC(pglm2) #184.26
plot_model(pglm2, type = "diag")


#Model3 interactions
pglm3 <- lme(Pathogen_Damage_area ~ LD1 * LD2 , random = ~1|Species/E_load, method = "ML", data = LDEPtraits)

summary(pglm3)
AIC(pglm3) #191.52
plot_model(pglm3, type = "diag")


tab_model(pglm, pglm2, pglm3,
          transform = NULL,
          show.est = TRUE,
          show.se = TRUE,
          auto.label = TRUE,
          show.re.var = T, 
          show.aic = TRUE, 
          show.intercept = TRUE, 
          title = "LMM Maximum Likelihood Pathogen damage",
          # pred.labels = c("Intercept"),
          dv.labels = c("pglm ", "pglm2", "pglm3"),
          string.pred = "Coefficient",
          string.ci = "CI (95%)",
          string.p = "P-Value",
          digits.p = 3, 
          p.style = c("numeric_stars"))
```

### REML-pathogen

```{r, Restricted Maximum Likelihood Models }
preml <- lme(Pathogen_Damage_area ~ LD1 + LD2, random = ~1|Species, method = "REML", data = LDEPtraits) 

summary(preml)
AIC(preml) #192.42
plot_model(preml, type = "diag")

tab_model(pglm, preml, show.re.var = T, show.aic = TRUE, show.intercept = TRUE, title = "LMM Maximum Likelihood Ant damage", CSS = list(
    css.depvarhead = 'font-weight:bold;',
    css.centeralign = 'text-align: left;', 
    css.firsttablecol = 'font-weight: bold;',
    css.summary = 'font-weight: bold;',
    dv.labels = c("pglm ", "preml"),
    p.style = "numeric_stars"))


```

Model estimation with REML increases slightly AIC. Proceeding with ML model estimation.

### Random effects-pathogen

```{r, Checking contribution of random effects-pathogen}

pgls <- gls(Pathogen_Damage_area ~ LD1 + LD2, method = "ML", data = LDEPtraits)

AIC(pglm, pgls)
anova(aglm, agls)
# Species as a random factor decreases AIC value by ~0.5 points.

```

### ML-2-pathogen

Continuation of previous ML section. Moelling variance structure with `varIdent`, `varExp` and `varComb`. The pathogen data set has various nested factors. We have Species with different endophyte load (-+) then each of those individuals had a leaf that served as a control and another that was exposed to the pathogen. Hence, modelling for this data set is slightly different than the Ant data set.

```{r, Pathogen Modelling Variance Structure}
#varIdent
pglm_ident <- lme(Pathogen_Damage_area ~ LD1 + LD2, random = ~1|Species/Treatment, method = "ML", weights = varIdent(form = ~ 1|Species), control =  lmeControl(opt= 'nlminb'),  data = LDEPtraits)

summary(pglm_ident)
AIC(pglm_ident) #132.2
Anova(pglm_ident, type = "III")
plot_model(pglm_ident, type= "diag")

#Modelling variance structure with varIdent returns a lower AIC value (132)


# Model validation
op <- par(mfrow = c(3, 2), mar = c(4, 4, 2, 2))
plot(LDEPtraits$LD1, jitter(resid(pglm_ident, type = "response")), xlab = "LD1", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$LD1, jitter(resid(pglm_ident, type = "normalized")), xlab = "LD1", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$LD2, jitter(resid(pglm_ident, type = "response")), xlab = "LD2", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$LD2, jitter(resid(pglm_ident, type = "normalized")), xlab = "LD2", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEtraits$Shannon, jitter(resid(aglm_ident, type = "response")), xlab = "Shannon", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$Shannon, jitter(resid(pglm_ident, type = "normalized")), xlab = "Shannon", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")

#
par(mfrow = c(1,2))
plot(fitted(pglm_ident), resid(pglm_ident, type="normalized"), cex.axis=.5,
cex=.4, xlab="fitted values", ylab="standardized resid", cex.lab=.8)
plot(LDEPtraits$Species, resid(pglm_ident, type="normalized"), cex.axis=.5,
cex=.4, xlab="Species", ylab="standardized resid", cex.lab=.8)
abline(h = 0, col = "blue")
```

```{r, Pathogen varExp}
# varExp

pglm_exp <- lme(Pathogen_Damage_area ~ LD1 + LD2, random = ~1|Species/Treatment, method = "ML", weights = varExp(form = ~ LD1|Species), control = lmeControl(msMaxIter = 100, msMaxEval = 100),  data = LDEPtraits)
#control = lmeControl(msMaxIter = 1000, msMaxEval = 1000)
summary(pglm_exp)
AIC(pglm_exp)#162
Anova(pglm_exp, type = "III")
plot_model(pglm_exp, type= "diag")
```

```{r, Pathogen varComb}
# varComb
pglm_comb <- lme(Pathogen_Damage_area ~ LD1 + LD2, random = ~1|Species/Treatment, method = "ML", weights = varComb(varIdent(form = ~ 1 | Species), varPower()), control =  lmeControl(opt = 'nlminb'), data = LDEPtraits) # No convergence -03/03/2023. As of 03/06/2023 the model "reached without convergence". The argument 'returnObject' inside lmeControl is set to TRUE, allowing for this. 

# Optimizer control code. 
#control = lmeControl(msMaxIter = 5000, msMaxEval = 5000, msTol = 1e-7, returnObject = TRUE),
# control =  lmeControl(opt= 'nlminb')

summary(pglm_comb)
Anova(pglm_comb, type = 3)
AIC(pglm_comb) #128.2
plot_model(pglm_comb, type = "diag")

#Model Validation
op <- par(mfrow = c(3, 2), mar = c(4, 4, 2, 2))
plot(LDEPtraits$LD1, jitter(resid(pglm_comb, type = "response")), xlab = "LD1", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$LD1, jitter(resid(pglm_comb, type = "normalized")), xlab = "LD1", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$LD2, jitter(resid(pglm_comb, type = "response")), xlab = "LD2", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$LD2, jitter(resid(pglm_comb, type = "normalized")), xlab = "LD2", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$Shannon, jitter(resid(pglm_comb, type = "response")), xlab = "Shannon", ylab = "Ordinary Residuals")
abline(h = 0, col = "blue")
plot(LDEPtraits$Shannon, jitter(resid(pglm_comb, type = "normalized")), xlab = "Shannon", ylab = "Norm/standarized Residuals")
abline(h = 0, col = "blue")


#
par(mfrow = c(1,2))
plot(fitted(pglm_comb), resid(pglm_comb, type="normalized"), cex.axis=.5,
cex=.4, xlab="fitted values", ylab="standardized resid", cex.lab=.8)
abline(h = 0, col = "blue")
plot(LDEPtraits$Species, resid(pglm_comb, type="normalized"), cex.axis=.5,
cex=.4, xlab="Species", ylab="standardized resid", cex.lab=.8)
abline(h = 0, col = "blue")
```

```{r, Pathogen Table comparing linear models}

# Initial model with out variance structure, "varIdent" structure, and "varComb" structure

tab_model(pglm, pglm_ident, pglm_exp, pglm_comb,
          transform = NULL,
          show.est = TRUE,
          show.se = TRUE,
          auto.label = TRUE,
          show.re.var = T, 
          show.aic = TRUE, 
          show.intercept = TRUE, 
          title = "LMM Maximum Likelihood Pathogen damage",
          # pred.labels = c("Intercept"),
          dv.labels = c("pglm ", "pglm_ident", "pglm_exp", "pglm_comb"),
          string.pred = "Coefficient",
          string.ci = "CI (95%)",
          string.p = "P-Value",
          digits.p = 3, 
          p.style = c("numeric_stars"))


    # css.depvarhead = 'font-weight:bold;',
    # css.centeralign = 'text-align: left;', 
    # css.firsttablecol = 'font-weight: bold;',
    # css.summary = 'color: black;',
    # p.style = "numeric_stars"))
```

# LMM tables and estimate plots for ant and pathogen models with LDA axes

```{r, Tables comparing LMM models}

#This just merges tables made for Ant models and Pathogen models computed in previous sections. 
#
tab_model(aglm_comb, pglm_comb,
          transform = NULL,
          show.est = TRUE,
          show.se = TRUE,
          auto.label = TRUE,
          show.re.var = T,
          show.aic = TRUE,
          show.intercept = TRUE,
          title = "Best-fit LMM's Ant and Pathogen damage",
          pred.labels = c("Intercept", "LD1", "LD2"),
          dv.labels = c("Ant herbivory", "Pathogen damage"),
          string.pred = "Coefficient",
          string.ci = "CI (95%)",
          string.p = "P-Value",
          digits.p = 3,
          p.style = c("numeric_stars"))# file = "H:/.shortcut-targets-by-id/0B9v0CdUUCqU5VVR4a3BvNHM1Z28/VBL_users/Grad_Students/Bolivar/Dissertation/Leaf_Traits_Panama/Data/Sample_Sequencing/Post_Sequencing/Sequence_analyses/Reports/BestFit_LMM_Aant_Pathogen_02152023.html")

```
